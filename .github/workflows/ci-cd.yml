name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '18.x'
  GOOGLE_PROJECT_ID: ${{ secrets.GOOGLE_PROJECT_ID }}
  GOOGLE_SERVICE_ACCOUNT_KEY: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY }}
  GOOGLE_SERVICE_ACCOUNT_EMAIL: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_EMAIL }}

jobs:
  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run type checking
        run: npm run type-check

      - name: Run linting
        run: npm run lint

      - name: Run tests
        run: npm run test:coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production

  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_USER: testuser
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      # Skip Prisma steps for now since dependencies aren't installed yet
      # - name: Generate Prisma client
      #   run: npm run db:generate

      # - name: Run database migrations
      #   run: npm run db:deploy
      #   env:
      #     DATABASE_URL: postgresql://testuser:testpassword@localhost:5432/testdb

      - name: Run type checking
        run: npx tsc --noEmit

      - name: Run linting
        run: npm run lint

      - name: Run tests
        run: npm run test:coverage
        env:
          DATABASE_URL: postgresql://testuser:testpassword@localhost:5432/testdb
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test_jwt_secret
          NODE_ENV: test

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./backend/coverage/lcov.info
          flags: backend
          name: backend-coverage

      - name: Build application
        run: npm run build

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test-frontend, test-backend, security-scan]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for GCR
        run: gcloud auth configure-docker

      - name: Build and push Docker images
        run: |
          # Build frontend image
          docker build -t gcr.io/${{ env.GOOGLE_PROJECT_ID }}/analytics-frontend:${{ github.sha }} ./frontend
          docker push gcr.io/${{ env.GOOGLE_PROJECT_ID }}/analytics-frontend:${{ github.sha }}
          
          # Build backend image
          docker build -t gcr.io/${{ env.GOOGLE_PROJECT_ID }}/analytics-backend:${{ github.sha }} ./backend
          docker push gcr.io/${{ env.GOOGLE_PROJECT_ID }}/analytics-backend:${{ github.sha }}

      - name: Deploy to Cloud Run
        run: |
          # Deploy backend
          gcloud run deploy analytics-backend-staging \
            --image gcr.io/${{ env.GOOGLE_PROJECT_ID }}/analytics-backend:${{ github.sha }} \
            --platform managed \
            --region us-central1 \
            --allow-unauthenticated \
            --set-env-vars "NODE_ENV=staging"
          
          # Deploy frontend
          gcloud run deploy analytics-frontend-staging \
            --image gcr.io/${{ env.GOOGLE_PROJECT_ID }}/analytics-frontend:${{ github.sha }} \
            --platform managed \
            --region us-central1 \
            --allow-unauthenticated \
            --set-env-vars "NODE_ENV=staging"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test-frontend, test-backend, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for GCR
        run: gcloud auth configure-docker

      - name: Build and push Docker images
        run: |
          # Build frontend image
          docker build -t gcr.io/${{ env.GOOGLE_PROJECT_ID }}/analytics-frontend:${{ github.sha }} ./frontend
          docker push gcr.io/${{ env.GOOGLE_PROJECT_ID }}/analytics-frontend:${{ github.sha }}
          
          # Build backend image  
          docker build -t gcr.io/${{ env.GOOGLE_PROJECT_ID }}/analytics-backend:${{ github.sha }} ./backend
          docker push gcr.io/${{ env.GOOGLE_PROJECT_ID }}/analytics-backend:${{ github.sha }}

      - name: Deploy to Cloud Run
        run: |
          # Deploy backend
          gcloud run deploy analytics-backend \
            --image gcr.io/${{ env.GOOGLE_PROJECT_ID }}/analytics-backend:${{ github.sha }} \
            --platform managed \
            --region us-central1 \
            --allow-unauthenticated \
            --set-env-vars "NODE_ENV=production"
          
          # Deploy frontend
          gcloud run deploy analytics-frontend \
            --image gcr.io/${{ env.GOOGLE_PROJECT_ID }}/analytics-frontend:${{ github.sha }} \
            --platform managed \
            --region us-central1 \
            --allow-unauthenticated \
            --set-env-vars "NODE_ENV=production"

      - name: Run health checks
        run: |
          # Wait for services to be ready
          sleep 30
          
          # Get service URLs
          BACKEND_URL=$(gcloud run services describe analytics-backend --region=us-central1 --format='value(status.url)')
          FRONTEND_URL=$(gcloud run services describe analytics-frontend --region=us-central1 --format='value(status.url)')
          
          # Health checks
          curl -f $BACKEND_URL/health || exit 1
          curl -f $FRONTEND_URL || exit 1